// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  profileImage  String?
  customerId    String?        @unique
  stripeId      String?        @unique
  clerkId       String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  payments      Payment[]
  role          UserRole       @default(USER)
  restaurants   Restaurant[]
  categories    Category[]
  orders        Order[]
  profile       Profile?
  menuItems     MenuItem[]
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  address     String
  phone       String
  ownerId     String     @db.ObjectId
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  userId      String?    @db.ObjectId
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuItems   MenuItem[]
  categories  Category[]
  orders      Order[]
  workHours   Json?
  methods     Json?
}

model Category {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  order        Int         @default(0)
  active       Boolean     @default(true)
  restaurantId String?     @db.ObjectId
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  userId       String?     @db.ObjectId
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        MenuItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model MenuItem {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  price        Float
  categoryId   String      @db.ObjectId
  category     Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurantId String      @db.ObjectId
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  userId       String      @db.ObjectId
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAvailable  Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
}

model Order {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String      @db.ObjectId
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  status       OrderStatus @default(PENDING)
  total        Float
  items        OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String   @db.ObjectId
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subscription {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  stripeId         String?   @unique
  status           String
  currentPeriodEnd DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String    @db.ObjectId
  plan             Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId           String    @db.ObjectId
  payments         Payment[]
}

model Payment {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  stripeId       String?      @unique
  amount         Float
  currency       String
  status         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.ObjectId
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String       @db.ObjectId
  plan           Plan         @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId         String       @db.ObjectId
}

model Plan {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  price         Float
  stripePriceId String?        @unique
  alias         String         @unique @default("free")
  order         Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  payments      Payment[]
}

enum UserRole {
  ADMIN
  USER
  RESTAURANT_OWNER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
